using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace Group_Project
{
    public partial class AdminView : Form
    {

        /// <summary>
        /// A list of all the leagues in the databse
        /// </summary>
        private List<Classes.League> LeagueList = new List<Classes.League>();
        /// <summary>
        /// A list of all the teams and their score in the selected league
        /// </summary>
        private List<Classes.Team> TeamList = new List<Classes.Team>();
        /// <summary>
        /// A list of all the players in the selected Team
        /// </summary>
        private List<Classes.Player> PlayerList = new List<Classes.Player>();
        /// <summary>
        /// A list of all the fixtures in the selected league
        /// </summary>
        private List<Classes.Fixture> FixtureList = new List<Classes.Fixture>();

        #region Initial Setup
        /// <summary>
        /// AutoGenerated Code
        /// </summary>
        public AdminView()
        {
            InitializeComponent();
        }
        /// <summary>
        /// Code run on the page startup. Sets up events to allow the usercontrols to pass updates back to the form, colourchanging the form, and setting up the data for the usercontrols.
        /// </summary>
        /// <param name="sender">Sending Object</param>
        /// <param name="e">Event Argument</param>
        private void AdminView_Load(object sender, EventArgs e)
        {
            fixtureView1.UpdateView += new EventHandler(UpdateView);
            teamView1.UpdateView += new EventHandler(UpdateView);
            passwordControlView1.UpdateView += new EventHandler(UpdateView);
            leagueDetailsView1.UpdateView += new EventHandler(UpdateView);
            teamDetailsView1.UpdateView += new EventHandler(UpdateView);
            leagueTeamAssignmentView1.UpdateView += new EventHandler(UpdateView);
            colourchange();
            GetData();
        }
        #endregion

        #region Global Updates
        /// <summary>
        /// reset the dropdown boxes, and then recollect all of the data from the database.
        /// </summary>
        protected void GetData()
        {
            tscbLeague.Items.Clear();
            tscbTeam.Items.Clear();
            Database.DatabaseConnection.dbConnect();
            FillLeagues();
            Database.DatabaseConnection.dbDisconnect();
        }
        /// <summary>
        /// fill the leaguelist class, the league dropdown, and the usercontrols that don't depend on the league.
        /// </summary>
        private void FillLeagues()
        {
            LeagueList = Database.LeagueList.Fill();
            tscbLeague.Items.Clear();
            foreach (Classes.League lg in LeagueList)
            {
                tscbLeague.Items.Add(lg.LeagueName);
            }
            tscbLeague.SelectedIndex = 0;
            passwordControlView1.update();
            leagueDetailsView1.update(LeagueList);
            teamDetailsView1.update();
        }
        /// <summary>
        /// fill the team dropdown and the teamlist class
        /// </summary>
        /// <param name="League">the League ID</param>
        private void FillTeams(int League)
        {
            TeamList = Database.TeamList.Fill(League);
            tscbTeam.Items.Clear();
            foreach (Classes.Team tm in TeamList)
            {
                tscbTeam.Items.Add(tm.TeamName);
            }
            tscbTeam.SelectedIndex = 0;
        }

        #endregion

        #region UpdateHanding
        /// <summary>
        /// passed update from usecontrol to update entire form
        /// </summary>
        /// <param name="sender">sending object</param>
        /// <param name="e">event arguement</param>
        protected void UpdateView(object sender, EventArgs e)
        {
            GetData();
            tscbLeague.SelectedIndex = 0;
        }
        #endregion

        #region OnClose
        /// <summary>
        /// the logout button closes the form
        /// </summary>
        /// <param name="sender">Sending Object</param>
        /// <param name="e">Event argument</param>
        private void tsmiLogout_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        /// <summary>
        /// on closing the form, show the public view again
        /// </summary>
        /// <param name="sender">Sending Object</param>
        /// <param name="e">Event Argument</param>
        private void AdminView_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Owner.Show();
        }
        #endregion

        #region Object Events
        /// <summary>
        /// Oper the user guide PDF
        /// </summary>
        /// <param name="sender">Sending Object</param>
        /// <param name="e">Event Argument</param>
        private void tsmiHelp_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("User Guide.pdf");
        }
        /// <summary>
        /// When the league dropdown is changed, fill the league related classes, and update their usercontrols
        /// </summary>
        /// <param name="sender">Sending Object</param>
        /// <param name="e">Event Arguement</param>
        private void tscbLeague_SelectedIndexChanged(object sender, EventArgs e)
        {
            Database.DatabaseConnection.dbConnect();
            FillTeams(LeagueList.FirstOrDefault(x => x.LeagueName == tscbLeague.Text).LeagueId);
            List<Classes.TeamDetails> TeamDetailsList = Database.TeamList.AllTeams();
            Database.DatabaseConnection.dbDisconnect();
            leagueView1.update(TeamList);
            leagueTeamAssignmentView1.update(LeagueList, TeamDetailsList);
        }
        /// <summary>
        /// When the team dropdown is changed, fill the team related classes, and update their usercontrols
        /// </summary>
        /// <param name="sender">Sending Object</param>
        /// <param name="e">Event Arguement</param>
        private void tscbTeam_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                int TeamID = TeamList.FirstOrDefault(x => x.TeamName == tscbTeam.Text).TeamID;
                Database.DatabaseConnection.dbConnect();
                PlayerList = Database.TeamPlayers.Fill(TeamID);
                FixtureList = Database.FixtureList.FillLeague(LeagueList.FirstOrDefault(x => x.LeagueName == tscbLeague.Text).LeagueId, TeamID);
                Database.DatabaseConnection.dbDisconnect();
                teamView1.update(PlayerList, true);
                teamView1.TeamID = TeamID;
                fixtureView1.update(FixtureList, true, LeagueList.FirstOrDefault(x => x.LeagueName == tscbLeague.Text).LeagueId);
            }
            catch
            {
                MessageBox.Show("This team does not play in the league", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        /// <summary>
        /// on clicking the colour change form button, open the form, and show it as dialog.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tsmiColours_Click(object sender, EventArgs e)
        {
            frmColourChange ColourChangeForm = new frmColourChange();
            ColourChangeForm.Owner = this;
            ColourChangeForm.ColourChangeEvent += ColourChangeForm_ColourChangeEvent;
            ColourChangeForm.ShowDialog();
        }
        #endregion

        #region Utility Functions
        /// <summary>
        /// an event to handle colour changes passed from the colour change form
        /// </summary>
        public event EventHandler ColourChangeEvent;
        /// <summary>
        /// a method to pass the colourchange up forms. is not used but exists for completeness sake.
        /// </summary>
        /// <param name="sender">Sending Object</param>
        /// <param name="e">Event Arguement</param>
        protected void UpdateParent(object sender, EventArgs e)
        {
            if (this.ColourChangeEvent != null)
                this.ColourChangeEvent(this, e);
        }
        /// <summary>
        /// Handling the colourchange event, by changing the colour of all controls and passing the command down to the usercontrols
        /// </summary>
        /// <param name="sender">Sending Object</param>
        /// <param name="e">Event Arguemet</param>
        private void ColourChangeForm_ColourChangeEvent(object sender, EventArgs e)
        {
            colourchange();
        }
        /// <summary>
        /// Change the form's colour by changing the colour of all controls and passing the command down to the usercontrols
        /// </summary>
        private void colourchange()
        {
            ColourChange.ColourForm(this);
            ColourChange.ColourMenuStrip(menuStrip1);
            fixtureView1.colourChange();
            leagueDetailsView1.colourChange();
            leagueView1.ChangeColour();
            passwordControlView1.colourChange();
            teamDetailsView1.colourChange();
            teamView1.colourChange();
            leagueTeamAssignmentView1.colourChange();
        }
        #endregion


    }
}
